{"ast":null,"code":"var _jsxFileName = \"/home/socket/code/github/DefiantLabs/sycamore/src/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; //Necessary CSS imports for the react-date-range package\n\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css'; //https://www.npmjs.com/package/react-date-range\n\nimport { DateRangePicker } from 'react-date-range';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst ENDPOINT = \"/events.csv\";\n\nfunction Form(props) {\n  _s();\n\n  //Options for the date dropdown, custom handler method generates the proper output for each option\n  //\"Custom\" will open the date range picker\n  const dateOptions = [\"All\", new Date().getFullYear(), new Date().getFullYear() - 1, \"Custom\"]; //Expected input to the date range picker component\n  //Sets a \"forever\" date range when start and end is null\n\n  const allRange = {\n    startDate: null,\n    endDate: null,\n    key: 'selection'\n  }; //State values for controlled inputs\n\n  const [chain, setChain] = useState('all');\n  const [address, setAddress] = useState('');\n  const [range, setRange] = useState(allRange);\n  const [format, setFormat] = useState('accointing');\n  const [error, setError] = useState(\"\"); //Class name for hiding and showing the date range picker\n\n  const [dateRangeClass, setDateRangeClass] = useState(\"hidden\"); //We handle submission in a custom way\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n  }; //Custom submit hanlder\n  //TODO: Fetch POST request to a backend API\n\n\n  const submit = evt => {\n    //The call to ISO string converts to UTC (which means we dont need to handle timezones on the backend)\n    let startDate = range.startDate;\n    let endDate = range.endDate;\n    let data = {\n      chain: chain,\n      address: address,\n      startDate: startDate ? startDate.toISOString() : null,\n      endDate: endDate ? endDate.toISOString() : null,\n      format: format\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    fetch(API_URL + ENDPOINT, requestOptions).then(res => {\n      if (res.status === 500) {\n        //Generic error handler for internal error\n        let errMsg = \"There was an error processing your request, please try again later\";\n        throw errMsg;\n      } else if (res.status !== 200) {\n        return res.json();\n      } else {\n        return res.blob();\n      }\n    }).then(data => {\n      if (data.message) {\n        throw data.message;\n      }\n\n      setError(\"\"); //This is a hack to get around fetch limitations\n      //You cannot download a file through AJAX requests normally\n      //Create a link, attach CSV file to it and force click\n      //See here: https://medium.com/yellowcode/download-api-files-with-react-fetch-393e4dae0d9e\n\n      const url = window.URL.createObjectURL(new Blob([data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `events.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    }).catch(data => {\n      if (typeof data == \"string\") {\n        setError(data);\n      } else {\n        setError(\"There was an error processing your request, please try again later\");\n      }\n    });\n  };\n\n  function handleDateRange(date) {\n    setRange(date[\"selection\"]);\n  }\n\n  function handleDateSelect(value) {\n    if (value === \"All\") {\n      //Hide date range picker and set range to \"All\" (i.e. null for start and end)\n      setDateRangeClass(\"hidden\");\n      setRange(allRange);\n    } else if (value === \"Custom\") {\n      //This resets the Date range picker to \"All\" dates and shows the date range picker form\n      setRange(allRange);\n      setDateRangeClass(\"\");\n    } else {\n      //Hide date range picker and set range to current year from option\n      setDateRangeClass(\"hidden\"); //Start is January 1st at the beginning of the day, end is December 31st at the end of the day\n\n      let start = new Date(value, 0, 1);\n      let end = new Date(value, 11, 31);\n      end.setHours(23, 59, 59, 999);\n      setRange({\n        startDate: start,\n        endDate: end,\n        key: \"selection\"\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Form\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"form-header\",\n        children: \"Select a chain and enter your address to generate a CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Chain:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"chains\",\n        className: \"input select\",\n        id: \"chains-input\",\n        defaultValue: chain,\n        onChange: evt => setChain(evt.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"osmosis-1\",\n          children: \"osmosis-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cosmoshub-4\",\n          children: \"cosmoshub-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"address\",\n        type: \"text\",\n        id: \"address-input\",\n        placeholder: \"Enter your address\",\n        className: \"input\",\n        value: address,\n        onChange: evt => setAddress(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Format:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"format\",\n        className: \"input select\",\n        id: \"format-input\",\n        defaultValue: format,\n        onChange: evt => setFormat(evt.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"accointing\",\n          children: \"Accointing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"koinly\",\n          children: \"Koinly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"Date Range:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"input select\",\n        id: \"date-input\",\n        defaultValue: dateOptions[0],\n        onChange: evt => handleDateSelect(evt.target.value),\n        children: dateOptions.map(dateOption => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dateOption,\n            children: dateOption\n          }, dateOption, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DateRangePicker, {\n        id: \"date-range-input\",\n        className: dateRangeClass // The date range picker expects an array of ranges (for selecting multiple ranges)\n        //We only use one range so there is only 1 selection ever\n        ,\n        ranges: [range],\n        onChange: handleDateRange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), error !== \"\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 33\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitButton\",\n        onClick: submit,\n        children: \"Generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"evcgnzK/SGT/XneiKZUP48GJHHU=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","DateRangePicker","API_URL","process","env","REACT_APP_API_URL","ENDPOINT","Form","props","dateOptions","Date","getFullYear","allRange","startDate","endDate","key","chain","setChain","address","setAddress","range","setRange","format","setFormat","error","setError","dateRangeClass","setDateRangeClass","onSubmit","evt","preventDefault","submit","data","toISOString","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","status","errMsg","json","blob","message","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","catch","handleDateRange","date","handleDateSelect","value","start","end","setHours","target","map","dateOption"],"sources":["/home/socket/code/github/DefiantLabs/sycamore/src/Form.js"],"sourcesContent":["\nimport React, { useState } from \"react\";\n\n//Necessary CSS imports for the react-date-range package\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\n//https://www.npmjs.com/package/react-date-range\nimport { DateRangePicker  } from 'react-date-range';\n\nconst API_URL = process.env.REACT_APP_API_URL\nconst ENDPOINT = \"/events.csv\"\n\nfunction Form(props) {\n\n    //Options for the date dropdown, custom handler method generates the proper output for each option\n    //\"Custom\" will open the date range picker\n    const dateOptions = [\"All\", new Date().getFullYear(), new Date().getFullYear() - 1, \"Custom\"];\n\n    //Expected input to the date range picker component\n    //Sets a \"forever\" date range when start and end is null\n    const allRange = {\n        startDate: null,\n        endDate: null,\n        key: 'selection',\n    };\n\n    //State values for controlled inputs\n    const [chain, setChain] = useState('all');\n    const [address, setAddress] = useState('')\n    const [range, setRange] = useState(allRange);\n    const [format, setFormat] = useState('accointing');\n\n    const [error, setError] = useState(\"\");\n\n    //Class name for hiding and showing the date range picker\n    const [dateRangeClass, setDateRangeClass] = useState(\"hidden\");\n\n    //We handle submission in a custom way\n    const onSubmit = (evt) => {\n        evt.preventDefault();\n    }\n\n    //Custom submit hanlder\n    //TODO: Fetch POST request to a backend API\n    const submit = (evt) => {\n\n        //The call to ISO string converts to UTC (which means we dont need to handle timezones on the backend)\n        let startDate = range.startDate;\n        let endDate = range.endDate;\n        let data = {\n            chain: chain,\n            address: address,\n            startDate: startDate ? startDate.toISOString(): null,\n            endDate: endDate ? endDate.toISOString(): null,\n            format: format\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        };\n        fetch(API_URL + ENDPOINT, requestOptions)\n            .then((res) => {\n                if (res.status === 500){\n                    //Generic error handler for internal error\n                    let errMsg = \"There was an error processing your request, please try again later\"\n                    throw errMsg\n                }else if(res.status !== 200){\n                    return res.json();\n                }\n                else{\n                    return res.blob()\n                }\n            })\n            .then((data) => {\n                if (data.message){\n                    throw data.message;\n                }\n                setError(\"\")\n                //This is a hack to get around fetch limitations\n                //You cannot download a file through AJAX requests normally\n                //Create a link, attach CSV file to it and force click\n                //See here: https://medium.com/yellowcode/download-api-files-with-react-fetch-393e4dae0d9e\n                const url = window.URL.createObjectURL(new Blob([data]));\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', `events.csv`);\n                document.body.appendChild(link);\n                link.click();\n                link.parentNode.removeChild(link);\n            })\n            .catch(data => {\n                if (typeof data == \"string\"){\n                    setError(data)\n                }else{\n                    setError(\"There was an error processing your request, please try again later\")\n                }\n            });\n\n    }\n\n    function handleDateRange(date){\n        setRange(date[\"selection\"]);\n    }\n\n    function handleDateSelect(value){\n        if (value === \"All\"){\n            //Hide date range picker and set range to \"All\" (i.e. null for start and end)\n            setDateRangeClass(\"hidden\");\n            setRange(allRange);\n        }else if (value === \"Custom\"){\n            //This resets the Date range picker to \"All\" dates and shows the date range picker form\n            setRange(allRange);\n            setDateRangeClass(\"\");\n        }else{\n            //Hide date range picker and set range to current year from option\n            setDateRangeClass(\"hidden\");\n            //Start is January 1st at the beginning of the day, end is December 31st at the end of the day\n            let start = new Date(value, 0, 1);\n            let end = new Date(value, 11, 31);\n            end.setHours(23, 59, 59, 999);\n            setRange({\n                        startDate: start,\n                        endDate: end,\n                        key: \"selection\"\n            });\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <form className=\"Form\" onSubmit={onSubmit}>\n                <p className=\"form-header\">Select a chain and enter your address to generate a CSV</p>\n                <br/>\n                <label className=\"input-label\">Chain:</label>\n                <select name=\"chains\" className=\"input select\" id=\"chains-input\" defaultValue={chain} onChange={evt => setChain(evt.target.value)}>\n                    <option value=\"all\">All</option>\n                    <option value=\"osmosis-1\">osmosis-1</option>\n                    <option value=\"cosmoshub-4\">cosmoshub-4</option>\n                </select>\n                <label className=\"input-label\">Address:</label>\n                <input \n                    name=\"address\"\n                    type=\"text\"\n                    id=\"address-input\"\n                    placeholder=\"Enter your address\"\n                    className=\"input\"\n                    value={address}\n                    onChange={evt => setAddress(evt.target.value)}\n                />\n                <label className=\"input-label\">Format:</label>\n                <select name=\"format\" className=\"input select\" id=\"format-input\" defaultValue={format} onChange={evt => setFormat(evt.target.value)}>\n                    <option value=\"accointing\">Accointing</option>\n                    <option value=\"koinly\">Koinly</option>\n                </select>\n                <label className=\"input-label\">Date Range:</label>\n                <select className=\"input select\" id=\"date-input\" defaultValue={dateOptions[0]} onChange={evt => handleDateSelect(evt.target.value)}>\n                    {dateOptions.map((dateOption) => {\n                        return (\n                            <option value={dateOption} key={dateOption}>{dateOption}</option>\n                        );\n                    })}\n                </select>\n                <DateRangePicker\n                    id=\"date-range-input\"\n                    className={dateRangeClass}\n                    // The date range picker expects an array of ranges (for selecting multiple ranges)\n                    //We only use one range so there is only 1 selection ever\n                    ranges={[range]}\n                    onChange={handleDateRange}\n                />\n                {error !== \"\" ? <p className=\"error\">{error}</p>: null}\n                <button className=\"submitButton\" onClick={submit}>Generate</button>\n            </form>\n        </React.Fragment>\n    );\n}\n\nexport default Form;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}